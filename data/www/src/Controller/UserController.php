<?php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Security\Core\Security;
use App\Entity\User;
use App\Entity\Log;
use App\Service\Logger;


 
class UserController extends AbstractController
{

    public $isPasswordValid = true; 
    /**
     * @Route("/user/{id}", name="user_info")
     * @return Response
     */
    public function user_info(Request $request, ManagerRegistry $doctrine, $id)
    {
        $hash = $request->query->get('validation_hash');
        if (empty($hash)){
            return new Response("Wrong validation_hash, access denied, empty hash.", 401);
        }
        $user = $doctrine->getRepository(User::class)->find($id);
        if ($hash !== $user->getHash()){
            return new Response("Wrong validation_hash, access denied", 401);
        }
        return $this->render('user/user.html.twig', ['user' => $user, 'isPasswordValid' => $this->isPasswordValid]);
    }

    /**
     * @Route("/user/{id}/setpassword", name="user_set_password")
     * @return Response
     */
    public function user_set_password(Request $request, UserPasswordHasherInterface $passwordHasher, ManagerRegistry $doctrine, $id)
    {
        //Get the doctrine manager
        $user = $doctrine->getRepository(User::class)->find($id);
        $isPasswordCorrect = $passwordHasher->isPasswordValid($user, $request->request->get('_oldpassword'));
        $plaintextPassword = $request->request->get('_newpassword');


        $containsLetter  = (bool) preg_match('/[a-zA-Z]/',    $plaintextPassword);
        $containsDigit   = (bool) preg_match('/\d/',          $plaintextPassword);
        $containsSpecial = (bool) preg_match('/[^a-zA-Z\d]/', $plaintextPassword);
        $containsAll = ($containsLetter && $containsDigit && $containsSpecial); 

        if(strlen($plaintextPassword) < 8 && $containsAll!=1)
        {
            $this->isPasswordValid = false; 
            return $this->render('user/user.html.twig', ['user' => $user, 'isPasswordValid' => false]);  
        }
        else{
            // hash the password (based on the security.yaml config for the $user class)
            $hashedPassword = $passwordHasher->hashPassword(
                $user,
                $plaintextPassword
            ); 

            if($isPasswordCorrect){
                $user->setPassword($hashedPassword);
                $entityManager = $doctrine->getManager();
                $entityManager->persist($user);
                $entityManager->flush();
                $logger = new Logger($doctrine->getManager());
                $logger->log_action_user("USER PASSWORD CHANGED", $user);
                return $this->redirectToRoute('main');
            }

            return $this->redirectToRoute('user_info', ['id' => $id]);
        }     
    }
}