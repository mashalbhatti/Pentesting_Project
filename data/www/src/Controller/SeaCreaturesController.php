<?php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Routing\Annotation\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use App\Service\CallAPI;
use App\Service\FileUploader;
use App\Service\TCPDFService;
use App\Entity\Log;
use App\Service\Logger;
use Doctrine\Persistence\ManagerRegistry;

class SeaCreaturesController extends AbstractController
{
    /**
     * @Route("/seacreatures", name="seacreatures", methods={"GET","HEAD", "DELETE", "PUT"})
     * @return Response
     */
    public function index()
    {
        $api_creatures = new CallAPI();
        $creatures = $api_creatures->fetchAllCreatures();
        return $this->render('seacreatures/seacreatures.html.twig', ['creatures' => $creatures, 'message' => 'Here is a list of all the creatures studied by Plankton Corp']);
    }

    /**
     * @IsGranted("ROLE_USER")
     * @Route("/seacreature/{id}/edit", name="edit_template_creature", methods={"GET"})
     * @return Response
     */
    public function edit_template_creature($id)
    {
        $api_creatures = new CallAPI();
        $creature = $api_creatures->fetchOneCreature($id);
        if(!$creature){
            throw $this->createNotFoundException('This creature does not exist');
        }
        return $this->render('seacreatures/seacreature_edit.html.twig', ['creature' => $creature, 'message' => 'You can edit your creature here']);
    }

    /**
     * @Route("/seacreature/{id}/edit", name="edit_put_creature", methods={"PUT"})
     * @return Response
     */
    public function edit_put_creature($id, Request $request, FileUploader $fileUploader, ManagerRegistry $doctrine)
    {
        $api_creatures = new CallAPI();
        $creature = $api_creatures->fetchOneCreature($id);
        if(!$creature){
            throw $this->createNotFoundException('This creature does not exist');
        }
        $_PUT = $this->_parsePut();
        if (isset($_FILES['creature_file'])) {
            $file =  new UploadedFile( $_FILES['creature_file']['tmp_name'], $_FILES['creature_file']['name'], $_FILES['creature_file']['type'],null,true);
            $creatureFileName = $fileUploader->upload($file, $_PUT['creature_file_path']);
            $creatureFileName = $_PUT['creature_file_path'].$creatureFileName;
        } else {
            $creatureFileName = $creature['creature_image'];
        }
        $edit_creature = $api_creatures->editOneCreature($id, $_PUT['creature_name'], $_PUT['creature_description'], $creatureFileName, $_PUT['creature_depth']);
        //return $this->render('seacreatures/seacreature_edit.html.twig', ['creature' => $creature, 'message' => 'You can edit your creature here']);
        $logger = new Logger($doctrine->getManager());
        $logger->log_action_seacreature("SEA CREATURE EDITED", $_PUT['creature_name']);
        return $this->redirectToRoute('seacreatures', ['message' => 'Creature successfuly edited']);
    }


    /**
     * @IsGranted("ROLE_USER")
     * @Route("/seacreatures/add", name="add_seacreature", methods={"GET"})
     * @return Response
     */
    public function add_template_creature()
    {
        $api_creatures = new CallAPI();
        $creatures = $api_creatures->fetchAllCreatures();
        return $this->render('seacreatures/seacreature_add.html.twig', ['creatures' => $creatures, 'message' => 'You can add your creature here']);
    }

    /**
     * @Route("/seacreatures/add", name="add_post_seacreature", methods={"POST"})
     * @return Response
     */
    public function add_post_creature(Request $request, FileUploader $fileUploader, ManagerRegistry $doctrine)
    {  
        $api_creatures = new CallAPI();
        $file = $request->files->get('creature_file'); 
        $filePath = "static/images/upload/"; 
        $creatureFileName = $fileUploader->upload($file, $filePath);
        $add_creature = $api_creatures->addOneCreature($_POST['creature_name'], $_POST['creature_description'], $filePath.$creatureFileName, $_POST['creature_depth']); 
        $logger = new Logger($doctrine->getManager());
        $logger->log_action_seacreature("SEA CREATURE ADDED", $_POST['creature_name']);
        return $this->redirectToRoute('seacreatures', ['message' => 'Creature successfuly added']);
    }

    /**
     * @Route("/seacreature/{id}/delete", name="delete_seacreature", methods={"DELETE"})
     * @return Response
     */
    public function delete_creature($id, ManagerRegistry $doctrine)
    {
        $api_creatures = new CallAPI();
        $creature = $api_creatures->fetchOneCreature($id);
        $creatures = $api_creatures->deleteOneCreature($id);
        $response = new Response(json_encode(array('success' => 'true')));
        $response->headers->set('Content-Type', 'application/json');
        dump($creature);
        $logger = new Logger($doctrine->getManager());
        $logger->log_action_seacreature("SEA CREATURE DELETED", $creature['creature_name'] );

        return $response;
    }

    /**
     * @Route("/seacreature/{id}", name="detail_seacreature", methods={"GET","HEAD"})
     * @return Response
     */
    public function detail_creature($id)
    {
        $api_creatures = new CallAPI();
        $creature = $api_creatures->fetchOneCreature($id);
        dump($creature);
        return $this->render('seacreatures/seacreature_detail.html.twig', ['creature' => $creature, 'message' => 'Here are the details for one of the creatures']);
    }

    /**
     * @Route("/seacreature/{id}/pdf", name="detail_seacreature_pdf", methods={"GET","HEAD"})
     * @return Response
     */
    public function detail_creature_pdf($id, TCPDFService $tcpdfService)
    {
        $api_creatures = new CallAPI();
        $creature = $api_creatures->fetchOneCreature($id);
        
        return $tcpdfService->make($creature['creature_name'], 
        $creature['creature_image'], 
        $creature['creature_description'], 
        $creature['creature_depth']);
    }

    // Snippet code to parse PUT data (not done by default by PHP)
    private function _parsePut()
    {
        global $_PUT;

        /* PUT data comes in on the stdin stream */
        $putdata = fopen("php://input", "r");

        /* Open a file for writing */
        // $fp = fopen("myputfile.ext", "w");

        $raw_data = '';

        /* Read the data 1 KB at a time
        and write to the file */
        while ($chunk = fread($putdata, 1024))
            $raw_data .= $chunk;

        /* Close the streams */
        fclose($putdata);

        // Fetch content and determine boundary
        $boundary = substr($raw_data, 0, strpos($raw_data, "\r\n"));

        if(empty($boundary)){
            parse_str($raw_data,$data);
            $GLOBALS[ '_PUT' ] = $data;
            return;
        }

        // Fetch each part
        $parts = array_slice(explode($boundary, $raw_data), 1);
        $data = array();

        foreach ($parts as $part) {
            // If this is the last part, break
            if ($part == "--\r\n") break;

            // Separate content from headers
            $part = ltrim($part, "\r\n");
            list($raw_headers, $body) = explode("\r\n\r\n", $part, 2);

            // Parse the headers list
            $raw_headers = explode("\r\n", $raw_headers);
            $headers = array();
            foreach ($raw_headers as $header) {
                list($name, $value) = explode(':', $header);
                $headers[strtolower($name)] = ltrim($value, ' ');
            }

            // Parse the Content-Disposition to get the field name, etc.
            if (isset($headers['content-disposition'])) {
                $filename = null;
                $tmp_name = null;
                preg_match(
                    '/^(.+); *name="([^"]+)"(; *filename="([^"]+)")?/',
                    $headers['content-disposition'],
                    $matches
                );
                list(, $type, $name) = $matches;

                //Parse File
                if( isset($matches[4]) )
                {
                    //if labeled the same as previous, skip
                    if( isset( $_FILES[ $matches[ 2 ] ] ) )
                    {
                        continue;
                    }

                    //get filename
                    $filename = $matches[4];

                    //get tmp name
                    $filename_parts = pathinfo( $filename );
                    $tmp_name = tempnam( ini_get('upload_tmp_dir'), $filename_parts['filename']);

                    //populate $_FILES with information, size may be off in multibyte situation
                    $_FILES[ $matches[ 2 ] ] = array(
                        'error'=>0,
                        'name'=>$filename,
                        'tmp_name'=>$tmp_name,
                        'size'=>strlen( $body ),
                        'type'=>$value
                    );

                    //place in temporary directory
                    file_put_contents($tmp_name, $body);
                }
                //Parse Field
                else
                {
                    $data[$name] = substr($body, 0, strlen($body) - 2);
                }
            }

        }
        $GLOBALS[ '_PUT' ] = $data;
        return $data;
    }
    
}