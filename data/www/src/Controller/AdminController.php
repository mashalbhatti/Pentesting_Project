<?php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Doctrine\Persistence\ManagerRegistry;
use App\Service\Logger;
use App\Entity\User;
use App\Entity\Log;

class AdminController extends AbstractController
{

    /**
     * @Route("/admin", name="admin")
     * @return Response
     */
    public function index(ManagerRegistry $doctrine)
    {
        $logs = $doctrine->getRepository(Log::class)->findAll();
        return $this->render('admin/admin.html.twig', ['logs' => $logs]);
    }

    /**
     * @Route("/admin/users", name="user_management")
     * @return Response
     */
    public function user_management(Request $request, ManagerRegistry $doctrine): Response
    {
        $users = $doctrine->getRepository(User::class)->findAll();
        return $this->render('admin/users.html.twig', ['users' => $users, 'message' => 'Here is a list of all the users allowed to access this application']);
    }

    /**
     * @Route("/admin/users/export", name="user_export")
     * @return Response
     */
    public function user_export(Request $request, ManagerRegistry $doctrine): Response
    {
        $users = $doctrine->getRepository(User::class)->findAll();
        var_dump($users);
        var_dump((serialize($users)));
        $str = base64_encode(serialize($users));
        return $this->render('admin/users_export.html.twig', ['str' => $str]);
    }

    /**
     * @Route("/admin/users/import", name="user_import", methods={"GET"})
     * @return Response
     */
    public function user_import(Request $request, ManagerRegistry $doctrine): Response
    {
        return $this->render('admin/users_import.html.twig');
    }

    /**
     * @Route("/admin/users/import", name="user_import_post", methods={"POST"})
     * @return Response
     */
    public function user_import_post(Request $request, ManagerRegistry $doctrine): Response
    {
        try{
            $str = $request->get('str');
            $users = unserialize(base64_decode($str));
        } catch (Exception $e) {
            throw new Symfony\Component\HttpKernel\Exception\HttpException(500, "Import failed :(");
        }

        $entityManager = $doctrine->getManager();
        foreach ($users as $user){
            $repository = $doctrine->getRepository(User::class);
            $verify_user = $repository->findBy(array('email' =>$user->getEmail() ),array('email' => 'ASC'),1 ,0)[0];
            if (isset($verify_user)) {
                $user->setEmail($user->getEmail(). "_copy");
            }
            $entityManager->persist($user);
        }
        // actually executes the queries (i.e. the INSERT query)
        $entityManager->flush();
        $logger = new Logger($doctrine->getManager());
        $logger->log_action_user("USER DATABASE IMPORTED", $user);
        
        return $this->render('admin/users_import.html.twig');
    }

    /**
     * @Route("/admin/user/{id}/delete", name="user_delete", methods={"DELETE"})
     * @return Response
     */
    public function user_delete(ManagerRegistry $doctrine, $id): Response
    {
        $entityManager = $doctrine->getManager();
        $repository = $doctrine->getRepository(User::class);
        $user = $repository->find($id);
        $entityManager->remove($user);
        $entityManager->flush();
        $logger = new Logger($doctrine->getManager());
        $logger->log_action_user("USER DELETED", $user);
        return $this->redirectToRoute('user_management');
    }

    /**
     * @Route("/admin/user/add", name="user_add")
     * @return Response
     */
    public function user_add(Request $request, UserPasswordHasherInterface $passwordHasher, ManagerRegistry $doctrine): Response
    {
        //Get the doctrine manager
        $entityManager = $doctrine->getManager();
        // creates a user object and initializes some data for this example
        $user = new User();
        $user->setPassword('');

        $form = $this->createFormBuilder($user)
            ->add('email', TextType::class)
            ->add('save', SubmitType::class, ['label' => 'Create User'])
            ->getForm();
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            // $form->getData() holds the submitted values
            // but, the original `$user` variable has also been updated
            $user = $form->getData();
            // Set a default password for users defined in .env
            $plaintextPassword = $_ENV['default_user_password'];

            // hash the password (based on the security.yaml config for the $user class)
            $hashedPassword = $passwordHasher->hashPassword(
                $user,
                $plaintextPassword
            );
            $user->setPassword($hashedPassword);
            $entityManager->persist($user);

            // actually executes the queries (i.e. the INSERT query)
            $entityManager->flush();

            return $this->redirectToRoute('user_management');
        }
        return $this->renderForm('admin/new_user.html.twig', [
            'form' => $form,
        ]);
    }

        /**
     * @Route("/admin/user/{id}/edit", name="user_edit")
     * @return Response
     */
    public function user_edit(Request $request, UserPasswordHasherInterface $passwordHasher, ManagerRegistry $doctrine, $id): Response
    {
        //Get the doctrine manager
        $entityManager = $doctrine->getManager();
        $repository = $doctrine->getRepository(User::class);
        $oldUser = $repository->find($id);

        $form = $this->createFormBuilder($oldUser)
            ->add('email', TextType::class)
            ->add('roles', ChoiceType::class,
                    [   'multiple' => true,
                        'choices'  => [
                        'ROLE_USER'  => 'ROLE_USER',
                        'ROLE_ADMIN' => 'ROLE_ADMIN'
                    ],
                ],
            )
            ->add('save', SubmitType::class, ['label' => 'Edit User'])
            ->getForm();
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            // $form->getData() holds the submitted values
            // but, the original `$user` variable has also been updated
            $user = $form->getData();
            $entityManager->persist($user);

            // actually executes the queries (i.e. the INSERT query)
            $entityManager->flush();

            return $this->redirectToRoute('user_management');
        }
        return $this->renderForm('admin/edit_user.html.twig', [
            'form' => $form,
        ]);
    }

}